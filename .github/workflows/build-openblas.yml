name: Build OpenBLAS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run weekly on Sundays at 02:00 UTC to check for new OpenBLAS releases
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      openblas_version:
        description: 'OpenBLAS version to build (e.g., v0.3.30, or leave empty for latest)'
        required: false
        default: ''
        type: string
      is_nightly:
        description: 'Create nightly release (overwrites previous nightly)'
        required: false
        default: false
        type: boolean

env:
  # Use input version if provided, otherwise let build script fetch latest
  OPENBLAS_VERSION: ${{ inputs.openblas_version || '' }}
  IS_NIGHTLY: ${{ inputs.is_nightly || github.event_name == 'schedule' }}

jobs:
  check-version:
    uses: ./.github/workflows/check-openblas.yml
    with:
      version: ${{ inputs.openblas_version || '' }}
      is-nightly: ${{ inputs.is_nightly || github.event_name == 'schedule' }}
    secrets: inherit

  build:
    name: Build ${{ matrix.runner }} ${{ matrix.manylinux || 'native' }}
    runs-on: ${{ matrix.runner }}
    container: ${{ matrix.manylinux && format('quay.io/pypa/{0}_{1}', matrix.manylinux, matrix.runner == 'ubuntu-24.04-arm' && 'aarch64' || 'x86_64') }}
    needs: check-version
    if: needs.check-version.outputs.should-build == 'true'
    
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux manylinux builds
          - runner: ubuntu-latest
            manylinux: manylinux2014
          - runner: ubuntu-latest
            manylinux: manylinux_2_28
          - runner: ubuntu-latest
            manylinux: manylinux_2_34
          - runner: ubuntu-24.04-arm
            manylinux: manylinux2014
          - runner: ubuntu-24.04-arm
            manylinux: manylinux_2_28
          - runner: ubuntu-24.04-arm
            manylinux: manylinux_2_34
          # Native OS builds
          - runner: windows-latest
          - runner: macos-13
          - runner: macos-14
          - runner: macos-15
          - runner: macos-14-arm64
          - runner: macos-15-arm64

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set derived build variables
      id: vars
      run: |
        # Determine architecture
        if [[ "${{ matrix.runner }}" == *"-arm"* || "${{ matrix.runner }}" == *"arm64" ]]; then
          ARCH="aarch64"
          TARGET_CPU="ARMV8"
        elif [[ "${{ matrix.runner }}" == windows-* ]]; then
          ARCH="x64"
          TARGET_CPU="NEHALEM"
        else
          ARCH="x86_64"
          TARGET_CPU="NEHALEM"
        fi
        
        # Determine platform
        if [[ -n "${{ matrix.manylinux }}" ]]; then
          PLATFORM="${{ matrix.manylinux }}"
        elif [[ "${{ matrix.runner }}" == windows-* ]]; then
          PLATFORM="windows"
        else
          PLATFORM="${{ matrix.runner }}"
        fi
        
        echo "arch=$ARCH" >> $GITHUB_OUTPUT
        echo "target_cpu=$TARGET_CPU" >> $GITHUB_OUTPUT
        echo "platform=$PLATFORM" >> $GITHUB_OUTPUT
        echo "Building for $PLATFORM ($ARCH) with target $TARGET_CPU"
    
    - name: Set up build environment
      uses: ./.github/actions/setup-build-env
      with:
        is-manylinux: ${{ matrix.manylinux != '' }}

    - name: Build OpenBLAS
      shell: bash
      env:
        OPENBLAS_VERSION: ${{ needs.check-version.outputs.openblas-version }}
        TARGET_CPU: ${{ steps.vars.outputs.target_cpu }}
        ARCH: ${{ steps.vars.outputs.arch }}
        PLATFORM: ${{ steps.vars.outputs.platform }}
      run: |
        chmod +x scripts/build-openblas.sh
        ./scripts/build-openblas.sh
        
        # Set the actual version that was built
        echo "ACTUAL_OPENBLAS_VERSION=${{ needs.check-version.outputs.openblas-version }}" >> $GITHUB_ENV

    - name: Package artifacts
      shell: bash
      run: |
        # Create artifact directory
        mkdir -p artifacts
        
        # Copy built libraries and headers
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          cp -r build/install/* artifacts/
        else
          cp -r build/install/* artifacts/
        fi
        
        # Create archive with actual version
        cd artifacts
        VERSION_TAG="${{ needs.check-version.outputs.openblas-version }}"
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          7z a "../openblas-${VERSION_TAG}-${{ steps.vars.outputs.platform }}-${{ steps.vars.outputs.arch }}.zip" .
        else
          tar -czf "../openblas-${VERSION_TAG}-${{ steps.vars.outputs.platform }}-${{ steps.vars.outputs.arch }}.tar.gz" .
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: openblas-${{ needs.check-version.outputs.openblas-version }}-${{ steps.vars.outputs.platform }}-${{ steps.vars.outputs.arch }}
        path: |
          *.tar.gz
          *.zip
        retention-days: 30

  release:
    name: Create Release
    needs: [check-version, build]
    runs-on: ubuntu-latest
    if: |
      needs.check-version.result == 'success' &&
      (needs.build.result == 'success' || (needs.build.result == 'skipped' && needs.check-version.outputs.is-nightly == 'true')) &&
      (github.event_name == 'workflow_dispatch' || github.event_name == 'schedule' || (github.event_name == 'push' && github.ref == 'refs/heads/main'))
    
    steps:
    - name: Download all artifacts
      if: needs.build.result == 'success'
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        merge-multiple: true

    - name: Delete existing nightly release
      if: needs.check-version.outputs.is-nightly == 'true'
      run: |
        # Delete existing nightly release and tag
        gh release delete nightly --yes --cleanup-tag || true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.check-version.outputs.is-nightly == 'true' && 'nightly' || format('{0}-build-{1}', needs.check-version.outputs.openblas-version, github.run_number) }}
        name: ${{ needs.check-version.outputs.is-nightly == 'true' && format('OpenBLAS {0} Nightly Build', needs.check-version.outputs.openblas-version) || format('OpenBLAS {0} Build {1}', needs.check-version.outputs.openblas-version, github.run_number) }}
        body: |
          ${{ needs.check-version.outputs.is-nightly == 'true' && format('Automated nightly build of OpenBLAS {0}

          **Version:** {0}
          **Commit:** {1}
          **Built:** {2}

          This release is updated weekly and contains the latest stable version of OpenBLAS compiled for multiple platforms.

          **Note:** This is a nightly build that gets overwritten weekly. For stable releases, use the tagged releases.', needs.check-version.outputs.openblas-version, needs.check-version.outputs.openblas-commit, github.run_id) || format('Build of OpenBLAS {0} for multiple platforms

          **Version:** {0}
          **Commit:** {1}
          **Build ID:** {2}', needs.check-version.outputs.openblas-version, needs.check-version.outputs.openblas-commit, github.run_number) }}
        draft: false
        prerelease: ${{ needs.check-version.outputs.is-nightly == 'true' }}
        files: ${{ needs.build.result == 'success' && 'artifacts/*' || '' }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}