---
name: Build OpenBLAS

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  schedule:
    # Run weekly on Sundays at 02:00 UTC to check for new OpenBLAS releases
    - cron: 0 2 * * 0
  workflow_dispatch:
    inputs:
      openblas_version:
        description: OpenBLAS version to build (e.g., v0.3.30, or leave empty for latest)
        required: false
        default: ''
        type: string

jobs:
  check:
    name: Check version
    runs-on: ubuntu-latest
    outputs:
      already_built: ${{ steps.check.outputs.already_built }}
      version: ${{ steps.version.outputs.version }}
      commit: ${{ steps.version.outputs.commit }}
    steps:
      - name: Get latest OpenBLAS version
        id: version
        run: |
          VERSION=$(gh release list --repo OpenMathLib/OpenBLAS --limit 1 --exclude-pre-releases --json tagName --jq '.[0].tagName')
          COMMIT=$(git ls-remote https://github.com/OpenMathLib/OpenBLAS.git "refs/tags/$VERSION" | cut -f1)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "commit=$COMMIT" >> $GITHUB_OUTPUT

      - name: Check if any build needed
        id: check
        env:
          COMMIT: ${{ steps.version.outputs.commit }}
        run: |
          if gh release list --limit 10 --json tagName,body | jq -r ".[] | select(.body | contains(\"$COMMIT\")) | .tagName" | head -1 | grep -q .; then
            echo "already_built=true" >> $GITHUB_OUTPUT
          else
            echo "already_built=false" >> $GITHUB_OUTPUT
          fi

  build:
    name: Build ${{ matrix.name }}
    runs-on: ${{ matrix.runner }}
    needs: check
    outputs:
      version: ${{ steps.version.outputs.version }}
    if: always() && (github.event_name == 'workflow_dispatch' || needs.check.outputs.already_built ==
      'false')
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux manylinux builds
          # - runner: ubuntu-latest
          #   toolset: devtoolset-10
          #   name: manylinux2014_x86_64
          # - runner: ubuntu-latest
          #   toolset: gcc-toolset-14
          #   name: manylinux_2_28_x86_64
          # - runner: ubuntu-latest
          #   toolset: gcc-toolset-14
          #   name: manylinux_2_34_x86_64
          # #  Neoverse not supported by GCC 10, so we skip manylinux2014_aarch64
          # - runner: ubuntu-24.04-arm
          #   toolset: gcc-toolset-14
          #   name: manylinux_2_28_aarch64
          # - runner: ubuntu-24.04-arm
          #   toolset: gcc-toolset-14
          #   name: manylinux_2_34_aarch64
          # Native OS builds
          # - runner: windows-latest
          #   name: windows-x64
          # macOS builds
          - runner: macos-13
            name: macos-13-x64
          - runner: macos-14
            name: macos-14-arm64
          - runner: macos-15
            name: macos-15-arm64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get OpenBLAS version for build
        id: version
        run: |
          OPENBLAS_VERSION=${{ inputs.openblas_version }}
          if [[ -z "$OPENBLAS_VERSION" ]]; then
            echo "No OpenBLAS version provided, using latest version"
            OPENBLAS_VERSION=${{ needs.check.outputs.version }}
          else
            echo "Using provided OpenBLAS version: $OPENBLAS_VERSION"
          fi
          echo "OPENBLAS_VERSION=$OPENBLAS_VERSION" >> $GITHUB_ENV
          echo "version=$OPENBLAS_VERSION" >> $GITHUB_OUTPUT

      - name: Set up build environment
        uses: ./.github/actions/setup-build-env
        with:
          is-manylinux: ${{ contains(matrix.name, 'manylinux') }}

      - name: Build OpenBLAS (Windows)
        if: contains(matrix.runner, 'windows')
        shell: msys2 {0}
        run: |
          chmod +x scripts/build-openblas.sh
          ./scripts/build-openblas.sh

      - name: Build OpenBLAS (macOS)
        if: contains(matrix.runner, 'macos')
        shell: bash
        run: |
          chmod +x scripts/build-openblas.sh
          ./scripts/build-openblas.sh

      - name: Build OpenBLAS (manylinux)
        if: contains(matrix.name, 'manylinux')
        shell: bash
        run: |
          docker run --rm -v "$PWD:/workspace" -w /workspace --env-file <(env) \
            quay.io/pypa/${{ matrix.name }} \
            bash -c "source /opt/rh/${{ matrix.toolset }}/enable && chmod +x scripts/build-openblas.sh && ./scripts/build-openblas.sh"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: openblas-${{ steps.version.outputs.version }}-${{ matrix.name }}
          path: install/
          if-no-files-found: error
          compression-level: 9
          retention-days: 30

  release:
    name: Create Release
    needs: [check, build]
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'workflow_dispatch' || github.event_name == 'schedule' || (github.event_name == 'push' && github.ref == 'refs/heads/master')) &&
      (needs.check.result == 'success' || needs.check.result == 'skipped') && needs.build.result == 'success'

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create release archives
        shell: bash
        run: |
          cd artifacts
          for dir in openblas-*; do
            if [[ "$dir" == *"windows"* ]]; then
              (cd "$dir" && zip -r "../${dir}.zip" .)
            else
              tar -czf "${dir}.tar.gz" -C "$dir" .
            fi
          done
          ls -la *.{tar.gz,zip} 2>/dev/null || echo "No archives created"

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: OpenBLAS ${{ needs.build.outputs.version }}
          files: artifacts/*.{tar.gz,zip}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
